// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profile_Service.DataAccess;

namespace Profile_Service.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    partial class ProfileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ProfileProfile", b =>
                {
                    b.Property<int>("followersID")
                        .HasColumnType("int");

                    b.Property<int>("followingID")
                        .HasColumnType("int");

                    b.HasKey("followersID", "followingID");

                    b.HasIndex("followingID");

                    b.ToTable("ProfileProfile");
                });

            modelBuilder.Entity("Profile_Service.Models.Profile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("accountID")
                        .HasColumnType("int");

                    b.Property<string>("bio")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("profileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userTag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("ProfileProfile", b =>
                {
                    b.HasOne("Profile_Service.Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("followersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile_Service.Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("followingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
